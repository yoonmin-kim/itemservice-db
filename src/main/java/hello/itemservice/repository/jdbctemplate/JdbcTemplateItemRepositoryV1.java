package hello.itemservice.repository.jdbctemplate;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import java.util.Optional;import javax.sql.DataSource;import org.springframework.dao.DataAccessException;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.jdbc.core.RowMapper;import org.springframework.jdbc.support.GeneratedKeyHolder;import org.springframework.jdbc.support.KeyHolder;import org.springframework.util.StringUtils;import hello.itemservice.domain.Item;import hello.itemservice.repository.ItemRepository;import hello.itemservice.repository.ItemSearchCond;import hello.itemservice.repository.ItemUpdateDto;import lombok.extern.slf4j.Slf4j;@Slf4jpublic class JdbcTemplateItemRepositoryV1 implements ItemRepository {	private final JdbcTemplate jdbcTemplate;	public JdbcTemplateItemRepositoryV1(DataSource datasource) {		this.jdbcTemplate = new JdbcTemplate(datasource);	}	@Override	public Item save(Item item) {		String sql = "insert into item(item_name, price, quantity) values (?,?,?) ";		KeyHolder keyHolder = new GeneratedKeyHolder();		jdbcTemplate.update(con -> {			PreparedStatement stmt = con.prepareStatement(sql, new String[] {"id"});			stmt.setString(1, item.getItemName());			stmt.setInt(2, item.getPrice());			stmt.setInt(3, item.getQuantity());			return stmt;		}, keyHolder);		long id = keyHolder.getKey().longValue();		item.setId(id);		return item;	}	@Override	public void update(Long itemId, ItemUpdateDto updateParam) {		String sql = "update item set item_name=?, price=?, quantity=? where id=?";		jdbcTemplate.update(sql,			updateParam.getItemName(),			updateParam.getPrice(),			updateParam.getQuantity(),			itemId);	}	@Override	public Optional<Item> findById(Long id) {		String sql = "select id, item_name, price, quantity from item where id=? ";		try{			Item item = jdbcTemplate.queryForObject(sql, itemRowMapper(), id);			return Optional.of(item);		} catch (DataAccessException e) {			log.error("db error", e);			return Optional.empty();		}	}	@Override	public List<Item> findAll(ItemSearchCond cond) {		String itemName = cond.getItemName();		Integer maxPrice = cond.getMaxPrice();		String sql = "select id, item_name, price, quantity from item ";		//동적 쿼리		if (StringUtils.hasText(itemName) || maxPrice != null) {			sql += " where";		}		boolean andFlag = false;		List<Object> param = new ArrayList<>();		if (StringUtils.hasText(itemName)) {			sql += " item_name like concat('%',?,'%')";			param.add(itemName);			andFlag = true;		}		if (maxPrice != null) {			if (andFlag) {				sql += " and";			}			sql += " price <= ?";			param.add(maxPrice);		}		log.info("sql={}", sql);		return jdbcTemplate.query(sql, itemRowMapper(), param.toArray());	}	private RowMapper<Item> itemRowMapper() {		return (rs, rowNum) -> {			Item item = new Item();			item.setId(rs.getLong("id"));			item.setItemName(rs.getString("item_name"));			item.setPrice(rs.getInt("price"));			item.setQuantity(rs.getInt("quantity"));			return item;		};	}}